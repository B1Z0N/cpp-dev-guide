{
  "paths": [
    {
      "type": "file",
      "value": "README.md"
    },
    {
      "type": "dir",
      "name": "C++",
      "children": [
        {
          "type": "file",
          "value": "C++/ABOUTcpp.md"
        },
        {
          "type": "file",
          "value": "C++/cppREPOS.md"
        },
        {
          "type": "file",
          "value": "C++/cppRES.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "etc",
      "children": [
        {
          "type": "file",
          "value": "etc/afterword.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "tools",
      "children": [
        {
          "type": "file",
          "value": "tools/README.md"
        },
        {
          "type": "dir",
          "name": "build",
          "children": [
            {
              "type": "file",
              "value": "tools/build/CMake.md"
            },
            {
              "type": "file",
              "value": "tools/build/README.md"
            },
            {
              "type": "file",
              "value": "tools/build/make.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "compilers",
          "children": [
            {
              "type": "file",
              "value": "tools/compilers/README.md"
            },
            {
              "type": "file",
              "value": "tools/compilers/clang.md"
            },
            {
              "type": "file",
              "value": "tools/compilers/gcc.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "docs",
          "children": [
            {
              "type": "file",
              "value": "tools/docs/README.md"
            },
            {
              "type": "file",
              "value": "tools/docs/doxygen.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "dynamic-analysis",
          "children": [
            {
              "type": "file",
              "value": "tools/dynamic-analysis/README.md"
            },
            {
              "type": "file",
              "value": "tools/dynamic-analysis/cachegrind.md"
            },
            {
              "type": "file",
              "value": "tools/dynamic-analysis/gdb.md"
            },
            {
              "type": "file",
              "value": "tools/dynamic-analysis/valgrind.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "editors-ides",
          "children": [
            {
              "type": "file",
              "value": "tools/editors-ides/README.md"
            },
            {
              "type": "file",
              "value": "tools/editors-ides/sublime.md"
            },
            {
              "type": "file",
              "value": "tools/editors-ides/vim.md"
            },
            {
              "type": "file",
              "value": "tools/editors-ides/vscode.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "static-analysis",
          "children": [
            {
              "type": "file",
              "value": "tools/static-analysis/README.md"
            },
            {
              "type": "file",
              "value": "tools/static-analysis/clang-format.md"
            },
            {
              "type": "file",
              "value": "tools/static-analysis/clang-tidy.md"
            },
            {
              "type": "file",
              "value": "tools/static-analysis/cppcheck.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "testing",
          "children": [
            {
              "type": "file",
              "value": "tools/testing/README.md"
            },
            {
              "type": "file",
              "value": "tools/testing/gtest.md"
            }
          ]
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "README.md",
      "url": "README.html",
      "content": "# About\nIt is a collection of useful c++ development tools, and resources to learn them. \n\n# Why?\n\nGenerally speaking it will be used as a reference for everyone who asks [me](https://github.com/B1Z0N) about this things. Also i was wondering if it is being taught in universities. So I asked a lot of developers in chats and fiends of mine, most answers was \"NO\". They also told me that they wish universities do cover this topics. So this is my answer to them.\n\n# What?\n\nThis repository is intended to cover:\n\n1. Simple description of C++ language for beginners.\n2. Useful resources to learn C++, for developers of different levels.\n3. Major general-use C++ related tools (general description, and resources to learn).\n4. Some author's thoughts about the way of c++ developer.\n\n# How?\n\n**ALMOST ALL OF THE RESOURCES WAS CONTRIBUTED TO/READ/TESTED BY MAINTAINERS(OR BY CONTRIBUTORS) OF THIS REPO**\n\n1. If you are a **beginner** in programming, or **in doubt** about learning C++, check [this](C++/ABOUTcpp.md) out.\n\n2. If you just want to learn from masters, then [here](C++/cppRES.md) are **THE LIST OF C++ RESOURCES**.\n\n3. If you want to have some practice, [here is](C++/cppREPOS.md) the list of repos to contribute to. You can start contributing from now, or after learning C++ tools in the next item.\n\n4. And finally, if you have some background in cppdev and you want to enhance the ability to organize your project, speed up development, learn best development process practices. You should definitely look in [here](tools/README.md), because this is **THE LIST OF USEFUL C++ TOOLS RESOURCES**.\n\n5. [Afterword](etc/afterword.md)\n-------\n## Want to add something?\n1. Read the [**contribution guidelines**][contrib-guide]\n2. **Fork** the repo.\n3. Create a **branch** and **add your tools/thoughts/references** (or other things that are appropriate for repository) that is not already in the repo.\n4. Submit a **pull request**\n\nYou can find more details regarding the steps above in the [contribution\nguidelines][contrib-guide], so be sure to check them out.\n\n### You disagree with what is written in this repo?\n\nJust [create a new issue](https://github.com/B1Z0N/cpp-dev-resources/issues/new) and I believe, that we'll achieve consensus \n:wink:\n(this is hidden reason for creating this repository)\n\n## Maintainers\n\nThis repo is being actively maintained by [@B1Z0N](https://github.com/B1Z0N) \nWe have [code of conduct][code-of-conduct]\n\n## License\n\nThis project is licensed under the terms of the [MIT license](LICENSE.md).\n\n[contrib-guide]: .github/CONTRIBUTING.md\n[code-of-conduct]: .github/CODE_OF_CONDUCT.md\n",
      "html": "<h1>About</h1>\n<p>It is a collection of useful c++ development tools, and resources to learn them.</p>\n<h1>Why?</h1>\n<p>Generally speaking it will be used as a reference for everyone who asks <a href=\"https://github.com/B1Z0N\">me</a> about this things. Also i was wondering if it is being taught in universities. So I asked a lot of developers in chats and fiends of mine, most answers was “NO”. They also told me that they wish universities do cover this topics. So this is my answer to them.</p>\n<h1>What?</h1>\n<p>This repository is intended to cover:</p>\n<ol>\n<li>Simple description of C++ language for beginners.</li>\n<li>Useful resources to learn C++, for developers of different levels.</li>\n<li>Major general-use C++ related tools (general description, and resources to learn).</li>\n<li>Some author’s thoughts about the way of c++ developer.</li>\n</ol>\n<h1>How?</h1>\n<p><strong>ALMOST ALL OF THE RESOURCES WAS CONTRIBUTED TO/READ/TESTED BY MAINTAINERS(OR BY CONTRIBUTORS) OF THIS REPO</strong></p>\n<ol>\n<li>\n<p>If you are a <strong>beginner</strong> in programming, or <strong>in doubt</strong> about learning C++, check <a href=\"C++/ABOUTcpp.html\">this</a> out.</p>\n</li>\n<li>\n<p>If you just want to learn from masters, then <a href=\"C++/cppRES.html\">here</a> are <strong>THE LIST OF C++ RESOURCES</strong>.</p>\n</li>\n<li>\n<p>If you want to have some practice, <a href=\"C++/cppREPOS.html\">here is</a> the list of repos to contribute to. You can start contributing from now, or after learning C++ tools in the next item.</p>\n</li>\n<li>\n<p>And finally, if you have some background in cppdev and you want to enhance the ability to organize your project, speed up development, learn best development process practices. You should definitely look in <a href=\"tools/README.html\">here</a>, because this is <strong>THE LIST OF USEFUL C++ TOOLS RESOURCES</strong>.</p>\n</li>\n<li>\n<p><a href=\"etc/afterword.html\">Afterword</a></p>\n</li>\n</ol>\n<hr>\n<h2>Want to add something?</h2>\n<ol>\n<li>Read the <a href=\".github/CONTRIBUTING.html\"><strong>contribution guidelines</strong></a></li>\n<li><strong>Fork</strong> the repo.</li>\n<li>Create a <strong>branch</strong> and <strong>add your tools/thoughts/references</strong> (or other things that are appropriate for repository) that is not already in the repo.</li>\n<li>Submit a <strong>pull request</strong></li>\n</ol>\n<p>You can find more details regarding the steps above in the <a href=\".github/CONTRIBUTING.html\">contribution\nguidelines</a>, so be sure to check them out.</p>\n<h3>You disagree with what is written in this repo?</h3>\n<p>Just <a href=\"https://github.com/B1Z0N/cpp-dev-resources/issues/new\">create a new issue</a> and I believe, that we’ll achieve consensus\n:wink:\n(this is hidden reason for creating this repository)</p>\n<h2>Maintainers</h2>\n<p>This repo is being actively maintained by <a href=\"https://github.com/B1Z0N\">@B1Z0N</a>\nWe have <a href=\".github/CODE_OF_CONDUCT.html\">code of conduct</a></p>\n<h2>License</h2>\n<p>This project is licensed under the terms of the <a href=\"LICENSE.html\">MIT license</a>.</p>\n",
      "id": 0
    },
    {
      "path": "C++/ABOUTcpp.md",
      "url": "C++/ABOUTcpp.html",
      "content": "# C++\n\nIs a general-purpose programming language created by [Bjarne Stroustrup](http://www.stroustrup.com/). C++ was designed with a bias towards system programming and embedded. Generally it is used everywhere where needed maximal performance or minimal memory consumption. \n\nSo this means that C++ is about performance, it is a nice part. But you should understand that we must sacrifice something. And this sacrifice is simplicity. C++ is not simple as we wish it to be, even when you have enough experience there are something that will surprise you, because there are a lot of corner cases, due to increased performance.\n\nOther C++ feature is that it understands that \"We are all adults here\". And it won't stop you from shooting yourself in the leg. In other words, you are allowed to do a lot here, but you should be aware of what you are doing, it is your responsibility. \n\nWhen comparing C++ and C, former is much safer than the later. C++ enables you to do more things and it has bigger standard library. Moreover C++ [`std`](https://en.wikipedia.org/wiki/C%2B%2B_Standard_Library) contains C standard library and generally all C++ is compatible with C(which means that almost all C code is valid C++ code). C is used today because there are a huge code-base written in C, and C++'s [OOP](https://searchmicroservices.techtarget.com/definition/object-oriented-programming-OOP)(object-oriented programming) not needed everywhere, as it seems at first glance.\n\nThere are a lot of [paradigms](https://en.wikipedia.org/wiki/Programming_paradigm) of software development. The most wide known is [procedural](https://en.wikipedia.org/wiki/Procedural_programming), OOP, [functional](https://en.wikipedia.org/wiki/Functional_programming). C++ is multi-paradigm programming language, it uses [generic](https://en.wikipedia.org/wiki/Generic_programming), object-oriented, functional, procedural paradigms.\n\nAs one big mind of cppdev once said: \n\n> The easiest way is to view C++ not as a single language but as a federation of related languages. Within a particular sublanguage, the rules tend to be simple, straightforward, and easy to remember.\t\t\t\t\t\t\t\t\t\n>\n> (c) Scott Meyers\n\n## :heavy_plus_sign:\n- Huge language supports most everything\n- Teaches fundamental OOP\n- Compatibility with C\n- Excellent compiler optimization\n  \n    At the time of the program being translated to machine code, \n    compiler does a big job of making it faster and shorter for you.\n    \n- Teaches low-level programming, but doesn't have as many pitfalls as C\n- Universal, portable, best complexity/efficiency trade-off\n## :heavy_minus_sign:\n- Module system is not great\n\n    C++ uses old `#include` system, inherited from C  \n    \n- Language is full of corner cases and undefined behaviors\n\n    [Undefined behavior](https://en.wikipedia.org/wiki/Undefined_behavior) in a program can cause unexpected results,\n    making it hard to [debug](https://en.wikipedia.org/wiki/Debugging).\n\n- Huge language gets in the way of learning\n\n    While learning something using C++, for example algorithms and data structures, you always need to think about\n    dozens of language aspects, for unexperienced programmers it quickly becomes annoying.\n\n- Retains nearly all bad habits of C\n\n  See C item in this down here for detail.\n  \n- Tough to learn as the first language\n- Memory bugs are hard to find\n\n    It uses [manual memory management](https://en.wikipedia.org/wiki/Manual_memory_management), just like C.\n  \n- Painfully slow compilation\n\n    While optimizer does a big job, it costs in time of compilation.\n\n## C++ is used in\n\n- Games\n- Search engines\n- Browsers\n- Server backend\n- Auto industry\n- Desktop apps\n- Animation\n- Compilers, interpreters, virtual machines, databases\n- Operating systems\n- Drivers\n- Embedded\n- Science \n- Factories\n- and many others\n\n# Author's thoughts\n\nI had two attempts of learning C++. First without any programming background. I used only procedural paradigm, even without a use of `std`. I didn't have a clue that i was doing something wrong. It was hard to read literature and I had a lack of motivation, since my programs was hard to [compile](https://en.wikipedia.org/wiki/Compiler)(create running programs)(yeah it was a total beginner level). So i stopped.\n\nSecond attempt was when i already knew C and Python(also Assembler a bit). Moving to C++ PL(programming language) was much easier, and that's why: C helped in understanding of how PC works, Python helped in developing application logic.\n\nWhen talking about programming in general some topics are not covered at all in universities or in books about C++. And you must learn from real-world projects. Major part of this topics is about development tools. Linux environment knowledge helped a lot the second time. This topics you can find in this repository.\n\n## C++ suits for\n\nPeople that like challenges and people with enough background in programming. Also after learning of  C++ PL it is relatively easy to switch to another common programming language.\n\nIf in doubt, read [this](http://www.bestprogramminglanguagefor.me/why-learn-c-plus-plus).\n\n# First PL?\n\nC++ is relatively hard to learn as the first programming language. Most of experienced C++ programmers had previous experience before learning C++. So maybe it is better to learn something else before C plus plus. \n\nHere are suggestions of some PLs that are suitable choice as the first one:\n\n- [Python](https://www.python.org/)\n\n  :heavy_plus_sign:\n  \n  - Lots of tutorials\n  - Easily readable(very similar to [pseudo-code](https://www.geeksforgeeks.org/how-to-write-a-pseudo-code/))\n  - Lots of libraries\n  - Easy to find a job\n  \n  :heavy_minus_sign:\n  \n  - Language fragmentation and not backward compatible\n      \n      Currently there are  3 versions of python, and they are used by different people, so it is harder to support \n      all them in your work. You must choose, moreover they are not backward compatible. \n      This means that not all Python 2 code is valid in Python 3 for example.\n  - No true parallelism\n  - Code should be intensively tested\n      \n      It is a dynamically typed language, which means that it allows a lot more scenarios to be interpreted without any\n      errors, so you should write a lot of tests to assure yourself in right behavior of the program. \n  - Too opinionated for a general-purpose programming language\n      \n      One of the mottos of Python is(not precise quote):\n      > There should be only one right way to do things - the \"Pythonic way\"\n      So while learning it is pretty easy, you are getting to \"tuned\" to the \"Pythonic way\".\n  - Relatively hard to switch to another language\n      \n      Hard to stop thinking in the \"Pythonic way\".\n      \n  Read more about Python [here](https://www.python.org/about/gettingstarted/). **Read a lot** to be high-qualified python\n  developer.\n\n- [C](https://en.wikipedia.org/wiki/C_(programming_language))\n\n  :heavy_plus_sign:\n\n  - Computer knowledge\n  \n      Writing in C helps to understand low level computer programming.\n      \n  - Industry standard\n  \n      Every experienced programmer at some point learns C, because it has huge code-base.\n      \n  - Easier to learn other languages\n  \n      All common modern PLs was developed on the basis of C. Their's syntax developed from C. Moreover, their's\n      compilers/interpreters likely to be written in C.\n      \n  - Simplicity\n  \n    C is simple with lesser rules than any other modern programming language.\n\n  :heavy_minus_sign:\n\n  - Language is full of corner cases and undefined behaviors\n      \n      [Undefined behavior](https://en.wikipedia.org/wiki/Undefined_behavior) in a program can cause unexpected results,\n      making it hard to\n      [debug](https://en.wikipedia.org/wiki/Debugging).\n     \n  - Long learning curve\n  \n      C will require you to learn concepts too advanced for most beginners. While the language compliments knowledge of\n      computer components very well, and gives a deeper understanding, it is also quite difficult to learn, and to use \n      correctly, especially without aforementioned knowledge.\n      \n      This con includes subcons: \n      requires [manual memory management](https://en.wikipedia.org/wiki/Manual_memory_management), \n      [low-level PL](https://www.computerhope.com/jargon/l/lowlangu.htm).\n     \n  - Relatively hard to find a job\n  \n  - Old\n  \n      C programming language was developed between 1972-1973, so it can't be considered as a modern one. C lacks a large\n      majority of programming concepts that modern languages make use of today. The existing functionality of C makes use of\n      outdated and deprecated methodologies which can be of great annoyance to the modern day programmer.\n      \n      This con includes subcons like: \n      [C structs](https://en.wikipedia.org/wiki/Struct_(C_programming_language)) are very weak and outdated,\n      weak limited [type safety](https://en.wikipedia.org/wiki/Type_safety),\n      arrays are not [first class](https://stackoverflow.com/questions/245192/what-are-first-class-objects) objects, \n      lack of support for [first class](https://stackoverflow.com/questions/245192/what-are-first-class-objects) strings.\n   \n  Despite all this cons, C is the language that seems to be in use for a long time, so you should check it out. \n  Books for this PL you could find in this repository, in the list of books for C++.\n \n- [Java](https://en.wikipedia.org/wiki/Java_(programming_language))\n\n  This part is about to be completed, since author don't have experience in this PL yet, but still considers it as one of the\n  best to learn for beginners. For now just read [this](https://www.slant.co/options/112/~java-review).\n\n\n\n- [JavaScript](https://en.wikipedia.org/wiki/JavaScript)\n\n  This part is about to be completed, since author don't have experience in this PL yet, but still considers it as one of the\n  best to learn for beginners. For now just read [this](https://www.slant.co/options/111/~javascript-review).\n\n\n\n- [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))\n\n  This part is about to be completed, since author don't have experience in this PL yet, but still considers it as one of the\n  best to learn for beginners. For now just read [this](https://www.slant.co/options/115/~c-review).\n  \n\n  \nThere are a lot of other programming languages for beginners, so you should check this links:\n  - [index](https://www.tiobe.com/tiobe-index/) of programming languages by popularity\n  - [site](http://www.bestprogramminglanguagefor.me/) that picks you a programming language depending on your needs\n  - [rating](https://www.slant.co/topics/25/~best-programming-language-to-learn-first) of the best programming languages to\n  learn first depending on community opinions\n  \n# Okay! What's next?\nIf you are sure about the choice of C++, then start reading books/tutorials and writing code. Create [pet projects](https://en.wiktionary.org/wiki/pet_project). But you should be aware of the fact, that for creating pet projects in C++, you should have good imagination. \n\nThis repo could provide you with books/tutorials.\nSo continue reading, go to the [C++ resources](cppRES.md) section. \n",
      "html": "<h1>C++</h1>\n<p>Is a general-purpose programming language created by <a href=\"http://www.stroustrup.com/\">Bjarne Stroustrup</a>. C++ was designed with a bias towards system programming and embedded. Generally it is used everywhere where needed maximal performance or minimal memory consumption.</p>\n<p>So this means that C++ is about performance, it is a nice part. But you should understand that we must sacrifice something. And this sacrifice is simplicity. C++ is not simple as we wish it to be, even when you have enough experience there are something that will surprise you, because there are a lot of corner cases, due to increased performance.</p>\n<p>Other C++ feature is that it understands that “We are all adults here”. And it won’t stop you from shooting yourself in the leg. In other words, you are allowed to do a lot here, but you should be aware of what you are doing, it is your responsibility.</p>\n<p>When comparing C++ and C, former is much safer than the later. C++ enables you to do more things and it has bigger standard library. Moreover C++ <a href=\"https://en.wikipedia.org/wiki/C%2B%2B_Standard_Library\"><code>std</code></a> contains C standard library and generally all C++ is compatible with C(which means that almost all C code is valid C++ code). C is used today because there are a huge code-base written in C, and C++'s <a href=\"https://searchmicroservices.techtarget.com/definition/object-oriented-programming-OOP\">OOP</a>(object-oriented programming) not needed everywhere, as it seems at first glance.</p>\n<p>There are a lot of <a href=\"https://en.wikipedia.org/wiki/Programming_paradigm\">paradigms</a> of software development. The most wide known is <a href=\"https://en.wikipedia.org/wiki/Procedural_programming\">procedural</a>, OOP, <a href=\"https://en.wikipedia.org/wiki/Functional_programming\">functional</a>. C++ is multi-paradigm programming language, it uses <a href=\"https://en.wikipedia.org/wiki/Generic_programming\">generic</a>, object-oriented, functional, procedural paradigms.</p>\n<p>As one big mind of cppdev once said:</p>\n<blockquote>\n<p>The easiest way is to view C++ not as a single language but as a federation of related languages. Within a particular sublanguage, the rules tend to be simple, straightforward, and easy to remember.</p>\n<p>© Scott Meyers</p>\n</blockquote>\n<h2>:heavy_plus_sign:</h2>\n<ul>\n<li>\n<p>Huge language supports most everything</p>\n</li>\n<li>\n<p>Teaches fundamental OOP</p>\n</li>\n<li>\n<p>Compatibility with C</p>\n</li>\n<li>\n<p>Excellent compiler optimization</p>\n<p>At the time of the program being translated to machine code,\ncompiler does a big job of making it faster and shorter for you.</p>\n</li>\n<li>\n<p>Teaches low-level programming, but doesn’t have as many pitfalls as C</p>\n</li>\n<li>\n<p>Universal, portable, best complexity/efficiency trade-off</p>\n</li>\n</ul>\n<h2>:heavy_minus_sign:</h2>\n<ul>\n<li>\n<p>Module system is not great</p>\n<p>C++ uses old <code>#include</code> system, inherited from C</p>\n</li>\n<li>\n<p>Language is full of corner cases and undefined behaviors</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">Undefined behavior</a> in a program can cause unexpected results,\nmaking it hard to <a href=\"https://en.wikipedia.org/wiki/Debugging\">debug</a>.</p>\n</li>\n<li>\n<p>Huge language gets in the way of learning</p>\n<p>While learning something using C++, for example algorithms and data structures, you always need to think about\ndozens of language aspects, for unexperienced programmers it quickly becomes annoying.</p>\n</li>\n<li>\n<p>Retains nearly all bad habits of C</p>\n<p>See C item in this down here for detail.</p>\n</li>\n<li>\n<p>Tough to learn as the first language</p>\n</li>\n<li>\n<p>Memory bugs are hard to find</p>\n<p>It uses <a href=\"https://en.wikipedia.org/wiki/Manual_memory_management\">manual memory management</a>, just like C.</p>\n</li>\n<li>\n<p>Painfully slow compilation</p>\n<p>While optimizer does a big job, it costs in time of compilation.</p>\n</li>\n</ul>\n<h2>C++ is used in</h2>\n<ul>\n<li>Games</li>\n<li>Search engines</li>\n<li>Browsers</li>\n<li>Server backend</li>\n<li>Auto industry</li>\n<li>Desktop apps</li>\n<li>Animation</li>\n<li>Compilers, interpreters, virtual machines, databases</li>\n<li>Operating systems</li>\n<li>Drivers</li>\n<li>Embedded</li>\n<li>Science</li>\n<li>Factories</li>\n<li>and many others</li>\n</ul>\n<h1>Author’s thoughts</h1>\n<p>I had two attempts of learning C++. First without any programming background. I used only procedural paradigm, even without a use of <code>std</code>. I didn’t have a clue that i was doing something wrong. It was hard to read literature and I had a lack of motivation, since my programs was hard to <a href=\"https://en.wikipedia.org/wiki/Compiler\">compile</a>(create running programs)(yeah it was a total beginner level). So i stopped.</p>\n<p>Second attempt was when i already knew C and Python(also Assembler a bit). Moving to C++ PL(programming language) was much easier, and that’s why: C helped in understanding of how PC works, Python helped in developing application logic.</p>\n<p>When talking about programming in general some topics are not covered at all in universities or in books about C++. And you must learn from real-world projects. Major part of this topics is about development tools. Linux environment knowledge helped a lot the second time. This topics you can find in this repository.</p>\n<h2>C++ suits for</h2>\n<p>People that like challenges and people with enough background in programming. Also after learning of  C++ PL it is relatively easy to switch to another common programming language.</p>\n<p>If in doubt, read <a href=\"http://www.bestprogramminglanguagefor.me/why-learn-c-plus-plus\">this</a>.</p>\n<h1>First PL?</h1>\n<p>C++ is relatively hard to learn as the first programming language. Most of experienced C++ programmers had previous experience before learning C++. So maybe it is better to learn something else before C plus plus.</p>\n<p>Here are suggestions of some PLs that are suitable choice as the first one:</p>\n<ul>\n<li>\n<p><a href=\"https://www.python.org/\">Python</a></p>\n<p>:heavy_plus_sign:</p>\n<ul>\n<li>Lots of tutorials</li>\n<li>Easily readable(very similar to <a href=\"https://www.geeksforgeeks.org/how-to-write-a-pseudo-code/\">pseudo-code</a>)</li>\n<li>Lots of libraries</li>\n<li>Easy to find a job</li>\n</ul>\n<p>:heavy_minus_sign:</p>\n<ul>\n<li>\n<p>Language fragmentation and not backward compatible</p>\n<p>Currently there are  3 versions of python, and they are used by different people, so it is harder to support\nall them in your work. You must choose, moreover they are not backward compatible.\nThis means that not all Python 2 code is valid in Python 3 for example.</p>\n</li>\n<li>\n<p>No true parallelism</p>\n</li>\n<li>\n<p>Code should be intensively tested</p>\n<p>It is a dynamically typed language, which means that it allows a lot more scenarios to be interpreted without any\nerrors, so you should write a lot of tests to assure yourself in right behavior of the program.</p>\n</li>\n<li>\n<p>Too opinionated for a general-purpose programming language</p>\n<p>One of the mottos of Python is(not precise quote):</p>\n<blockquote>\n<p>There should be only one right way to do things - the “Pythonic way”\nSo while learning it is pretty easy, you are getting to “tuned” to the “Pythonic way”.</p>\n</blockquote>\n</li>\n<li>\n<p>Relatively hard to switch to another language</p>\n<p>Hard to stop thinking in the “Pythonic way”.</p>\n</li>\n</ul>\n<p>Read more about Python <a href=\"https://www.python.org/about/gettingstarted/\">here</a>. <strong>Read a lot</strong> to be high-qualified python\ndeveloper.</p>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/C_(programming_language)\">C</a></p>\n<p>:heavy_plus_sign:</p>\n<ul>\n<li>\n<p>Computer knowledge</p>\n<p>Writing in C helps to understand low level computer programming.</p>\n</li>\n<li>\n<p>Industry standard</p>\n<p>Every experienced programmer at some point learns C, because it has huge code-base.</p>\n</li>\n<li>\n<p>Easier to learn other languages</p>\n<p>All common modern PLs was developed on the basis of C. Their’s syntax developed from C. Moreover, their’s\ncompilers/interpreters likely to be written in C.</p>\n</li>\n<li>\n<p>Simplicity</p>\n<p>C is simple with lesser rules than any other modern programming language.</p>\n</li>\n</ul>\n<p>:heavy_minus_sign:</p>\n<ul>\n<li>\n<p>Language is full of corner cases and undefined behaviors</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">Undefined behavior</a> in a program can cause unexpected results,\nmaking it hard to\n<a href=\"https://en.wikipedia.org/wiki/Debugging\">debug</a>.</p>\n</li>\n<li>\n<p>Long learning curve</p>\n<p>C will require you to learn concepts too advanced for most beginners. While the language compliments knowledge of\ncomputer components very well, and gives a deeper understanding, it is also quite difficult to learn, and to use\ncorrectly, especially without aforementioned knowledge.</p>\n<p>This con includes subcons:\nrequires <a href=\"https://en.wikipedia.org/wiki/Manual_memory_management\">manual memory management</a>,\n<a href=\"https://www.computerhope.com/jargon/l/lowlangu.htm\">low-level PL</a>.</p>\n</li>\n<li>\n<p>Relatively hard to find a job</p>\n</li>\n<li>\n<p>Old</p>\n<p>C programming language was developed between 1972-1973, so it can’t be considered as a modern one. C lacks a large\nmajority of programming concepts that modern languages make use of today. The existing functionality of C makes use of\noutdated and deprecated methodologies which can be of great annoyance to the modern day programmer.</p>\n<p>This con includes subcons like:\n<a href=\"https://en.wikipedia.org/wiki/Struct_(C_programming_language)\">C structs</a> are very weak and outdated,\nweak limited <a href=\"https://en.wikipedia.org/wiki/Type_safety\">type safety</a>,\narrays are not <a href=\"https://stackoverflow.com/questions/245192/what-are-first-class-objects\">first class</a> objects,\nlack of support for <a href=\"https://stackoverflow.com/questions/245192/what-are-first-class-objects\">first class</a> strings.</p>\n</li>\n</ul>\n<p>Despite all this cons, C is the language that seems to be in use for a long time, so you should check it out.\nBooks for this PL you could find in this repository, in the list of books for C++.</p>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/Java_(programming_language)\">Java</a></p>\n<p>This part is about to be completed, since author don’t have experience in this PL yet, but still considers it as one of the\nbest to learn for beginners. For now just read <a href=\"https://www.slant.co/options/112/~java-review\">this</a>.</p>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/JavaScript\">JavaScript</a></p>\n<p>This part is about to be completed, since author don’t have experience in this PL yet, but still considers it as one of the\nbest to learn for beginners. For now just read <a href=\"https://www.slant.co/options/111/~javascript-review\">this</a>.</p>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/C_Sharp_(programming_language)\">C#</a></p>\n<p>This part is about to be completed, since author don’t have experience in this PL yet, but still considers it as one of the\nbest to learn for beginners. For now just read <a href=\"https://www.slant.co/options/115/~c-review\">this</a>.</p>\n</li>\n</ul>\n<p>There are a lot of other programming languages for beginners, so you should check this links:</p>\n<ul>\n<li><a href=\"https://www.tiobe.com/tiobe-index/\">index</a> of programming languages by popularity</li>\n<li><a href=\"http://www.bestprogramminglanguagefor.me/\">site</a> that picks you a programming language depending on your needs</li>\n<li><a href=\"https://www.slant.co/topics/25/~best-programming-language-to-learn-first\">rating</a> of the best programming languages to\nlearn first depending on community opinions</li>\n</ul>\n<h1>Okay! What’s next?</h1>\n<p>If you are sure about the choice of C++, then start reading books/tutorials and writing code. Create <a href=\"https://en.wiktionary.org/wiki/pet_project\">pet projects</a>. But you should be aware of the fact, that for creating pet projects in C++, you should have good imagination.</p>\n<p>This repo could provide you with books/tutorials.\nSo continue reading, go to the <a href=\"cppRES.html\">C++ resources</a> section.</p>\n",
      "id": 1
    },
    {
      "path": "C++/cppREPOS.md",
      "url": "C++/cppREPOS.html",
      "content": "\n# About\n\nAfter learning at least basics of C++ you should start practicing actively, and soon you'll see the result. \nStart reading other repositories, reading code of others is a great experience, so do your best.\nAnd **this item** aimed at helping you to find such repositories. \nBut remember that during work, code of others could be not as good as in the repos from next item.\n\n# Repositories\nReading others code is very important, but not so easy to start. So I sorted repos by complexity, so that you get used to it.\n\n## Beginner\n- [Algorithms and data structures](https://github.com/faheel/Algos)\n- [Bigint](https://github.com/faheel/BigInt)\n## Intermediate\n- [Guidlines support library](https://github.com/microsoft/GSL)\n-\n### Advanced\n\n# Okay! What's next?\nNow you are ready to start learning [C++ tools](../tools/README.md) or if you already done, it's time to [afterword](../etc/afterword.md).\n",
      "html": "<h1>About</h1>\n<p>After learning at least basics of C++ you should start practicing actively, and soon you’ll see the result.\nStart reading other repositories, reading code of others is a great experience, so do your best.\nAnd <strong>this item</strong> aimed at helping you to find such repositories.\nBut remember that during work, code of others could be not as good as in the repos from next item.</p>\n<h1>Repositories</h1>\n<p>Reading others code is very important, but not so easy to start. So I sorted repos by complexity, so that you get used to it.</p>\n<h2>Beginner</h2>\n<ul>\n<li><a href=\"https://github.com/faheel/Algos\">Algorithms and data structures</a></li>\n<li><a href=\"https://github.com/faheel/BigInt\">Bigint</a></li>\n</ul>\n<h2>Intermediate</h2>\n<ul>\n<li><a href=\"https://github.com/microsoft/GSL\">Guidlines support library</a></li>\n<li></li>\n</ul>\n<h3>Advanced</h3>\n<h1>Okay! What’s next?</h1>\n<p>Now you are ready to start learning <a href=\"../tools/README.html\">C++ tools</a> or if you already done, it’s time to <a href=\"../etc/afterword.html\">afterword</a>.</p>\n",
      "id": 2
    },
    {
      "path": "C++/cppRES.md",
      "url": "C++/cppRES.html",
      "content": "# About\nThis section covers resources for learning C++ in general, and few specific topics of C++ programming. First of all you\nshould understand that it is not complete list, and it never aimed to be complete. Just a compilation of books, that with\nproper practice will lead you to great developer skills.\n# Table of contents\n- [About](#about)\n- [C](#c)\n  * [Books](#books)\n- [C++](#c-1)\n  * [Books](#books-1)\n    + [Beginner](#beginner)\n    + [Intermediate](#intermediate)\n    + [Specific topics](#specific-topics)\n      - [Templates](#templates)\n      - [Concurrency](#concurrency)\n      - [Testing](#testing)\n    + [Advanced](#advanced)\n  * [Blogs/channels/homepages](#blogschannelshomepages)\n  * [Guidelines](#guidelines)\n  * [Websites](#websites)\n  * [Similar resources](#similar-resources)\n- [Okay! What's next?](#okay-whats-next)\n    \n# C\nC is an important and initial subset of C++. It would be much better to learn it first, but you could of course skip this\npart.\n## Books\n- Head First C - David Griffiths and Dawn Griffiths\n\n    Perfect book for beginners, written in very easy-to-read and interesting manner.\n    \n- The C Programming Language - Brian Kernighan and Dennis Ritchie\n\n    Book written by creators of C. This is the definitive guide, for those who wish to learn C. I found examples very helpful\n    too.\n# C++\n## Books\n### Beginner\n- Principles and Practice Using C++ - Bjarne Stroustrup\n\n    Introduction to programming by C++ creator.\n    \n- The C++ Programming Language - Bjarne Stroustrup\n\n    Complete C++ language reference and tutorial. This book will teach you how to use C++ features correctly, as intended by\n    creator. Though it is very long to read, (around 13 hundreds of pages) it is very simply written. During reading this \n    book practice is welcomed and encouraged, since it is more of a reference.\n### Intermediate\nAll books of Scott Meyers are very useful in practice. He teaches that programming is about compromises, and that we must\nsearch for different methods of problem solving, so take this:\n- Effective C++ - Scott Meyers\n- More Effective C++ - Scott Meyers\n- Effective STL - Scott Meyers\n- Effective Modern C++ - Scott Meyers\nIf you don't have enough time, just read first book, it would be enough for the beginning.\n### Specific topics\nIntermediate programmer should learn specific topics of the language(which are themselves quite deep) before moving on to\nadvanced.\n#### Templates\nModern C++ is generic C++. So here is the good book about template programming:\n- C++ Templates: The Complete Guide - David Vandevoorde and Nicolai M. Josuttis\n#### Concurrency\n- C++ Concurrency in Action - Anthony Williams\n#### Testing\n- Modern C++ Programming with Test-Driven Development: Code Better, Sleep Better - Jeff Langr\n### Advanced\nWhen I become an advanced programmer, I'll complete this part.\n## Blogs/channels/homepages\n- [Herb Sutter's blog](https://herbsutter.com/)\n- [Personal homepage of C++ creator](http://www.stroustrup.com/)\n- [Scott Meyers' blog](http://scottmeyers.blogspot.com/)\n- [Anthony Williams' blog](justsoftwaresolutions.co.uk/blog/)\n- [Jonathan Boccara's blog](https://www.fluentcpp.com/)\n- [Jason Turner's yt channel](https://www.youtube.com/user/lefticus1)\n- [TheChernoProject yt channel](https://www.youtube.com/user/TheChernoProject)\n## Guidelines\n- [CppCoreGuidelines](https://github.com/isocpp/CppCoreGuidelines)\n\n    Very useful compilation of best practices using modern C++ by creators of the language.\n    \n- [Google C++ style guide](https://google.github.io/styleguide/cppguide.html)\n## Websites\n- [C++ standard site](https://isocpp.org/)\n- [C++ online reference](http://cppreference.com/)\n- [Stack Overflow](https://stackoverflow.com/)\n\n    Stack Overflow is a question and answer site for professional and enthusiast programmers. \n    \n- [Quora](https://www.quora.com/)\n\n    Quora is an American question-and-answer website where questions are asked, answered, and edited by Internet users,\n    either factually, or in the form of opinions.\n    \n- [C++ subreddit](https://www.reddit.com/r/cpp_questions/)\n## Similar resources\nThe best way to find desired information is to search the web. So here are some starter links:\n- [Definitive list](https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list) of books at\nstackoverflow\n- [Repository](https://github.com/rigtorp/awesome-modern-cpp) with compilation of useful resources on C++\n- [C++ cheat-sheet](https://github.com/gibsjose/cpp-cheat-sheet)\n\n# Okay! What's next?\nWhen you learned some C++ it is time to go and get some real-world experience. Here comes the [list of repositories](cppREPOS.md) to contribute to. Or if you want to, start learning [C++ dev tools](../tools/README.md)\n",
      "html": "<h1>About</h1>\n<p>This section covers resources for learning C++ in general, and few specific topics of C++ programming. First of all you\nshould understand that it is not complete list, and it never aimed to be complete. Just a compilation of books, that with\nproper practice will lead you to great developer skills.</p>\n<h1>Table of contents</h1>\n<ul>\n<li><a href=\"#about\">About</a></li>\n<li><a href=\"#c\">C</a>\n<ul>\n<li><a href=\"#books\">Books</a></li>\n</ul>\n</li>\n<li><a href=\"#c-1\">C++</a>\n<ul>\n<li><a href=\"#books-1\">Books</a>\n<ul>\n<li><a href=\"#beginner\">Beginner</a></li>\n<li><a href=\"#intermediate\">Intermediate</a></li>\n<li><a href=\"#specific-topics\">Specific topics</a>\n<ul>\n<li><a href=\"#templates\">Templates</a></li>\n<li><a href=\"#concurrency\">Concurrency</a></li>\n<li><a href=\"#testing\">Testing</a></li>\n</ul>\n</li>\n<li><a href=\"#advanced\">Advanced</a></li>\n</ul>\n</li>\n<li><a href=\"#blogschannelshomepages\">Blogs/channels/homepages</a></li>\n<li><a href=\"#guidelines\">Guidelines</a></li>\n<li><a href=\"#websites\">Websites</a></li>\n<li><a href=\"#similar-resources\">Similar resources</a></li>\n</ul>\n</li>\n<li><a href=\"#okay-whats-next\">Okay! What’s next?</a></li>\n</ul>\n<h1>C</h1>\n<p>C is an important and initial subset of C++. It would be much better to learn it first, but you could of course skip this\npart.</p>\n<h2>Books</h2>\n<ul>\n<li>\n<p>Head First C - David Griffiths and Dawn Griffiths</p>\n<p>Perfect book for beginners, written in very easy-to-read and interesting manner.</p>\n</li>\n<li>\n<p>The C Programming Language - Brian Kernighan and Dennis Ritchie</p>\n<p>Book written by creators of C. This is the definitive guide, for those who wish to learn C. I found examples very helpful\ntoo.</p>\n</li>\n</ul>\n<h1>C++</h1>\n<h2>Books</h2>\n<h3>Beginner</h3>\n<ul>\n<li>\n<p>Principles and Practice Using C++ - Bjarne Stroustrup</p>\n<p>Introduction to programming by C++ creator.</p>\n</li>\n<li>\n<p>The C++ Programming Language - Bjarne Stroustrup</p>\n<p>Complete C++ language reference and tutorial. This book will teach you how to use C++ features correctly, as intended by\ncreator. Though it is very long to read, (around 13 hundreds of pages) it is very simply written. During reading this\nbook practice is welcomed and encouraged, since it is more of a reference.</p>\n</li>\n</ul>\n<h3>Intermediate</h3>\n<p>All books of Scott Meyers are very useful in practice. He teaches that programming is about compromises, and that we must\nsearch for different methods of problem solving, so take this:</p>\n<ul>\n<li>Effective C++ - Scott Meyers</li>\n<li>More Effective C++ - Scott Meyers</li>\n<li>Effective STL - Scott Meyers</li>\n<li>Effective Modern C++ - Scott Meyers\nIf you don’t have enough time, just read first book, it would be enough for the beginning.</li>\n</ul>\n<h3>Specific topics</h3>\n<p>Intermediate programmer should learn specific topics of the language(which are themselves quite deep) before moving on to\nadvanced.</p>\n<h4>Templates</h4>\n<p>Modern C++ is generic C++. So here is the good book about template programming:</p>\n<ul>\n<li>C++ Templates: The Complete Guide - David Vandevoorde and Nicolai M. Josuttis</li>\n</ul>\n<h4>Concurrency</h4>\n<ul>\n<li>C++ Concurrency in Action - Anthony Williams</li>\n</ul>\n<h4>Testing</h4>\n<ul>\n<li>Modern C++ Programming with Test-Driven Development: Code Better, Sleep Better - Jeff Langr</li>\n</ul>\n<h3>Advanced</h3>\n<p>When I become an advanced programmer, I’ll complete this part.</p>\n<h2>Blogs/channels/homepages</h2>\n<ul>\n<li><a href=\"https://herbsutter.com/\">Herb Sutter’s blog</a></li>\n<li><a href=\"http://www.stroustrup.com/\">Personal homepage of C++ creator</a></li>\n<li><a href=\"http://scottmeyers.blogspot.com/\">Scott Meyers’ blog</a></li>\n<li><a href=\"justsoftwaresolutions.co.uk/blog/\">Anthony Williams’ blog</a></li>\n<li><a href=\"https://www.fluentcpp.com/\">Jonathan Boccara’s blog</a></li>\n<li><a href=\"https://www.youtube.com/user/lefticus1\">Jason Turner’s yt channel</a></li>\n<li><a href=\"https://www.youtube.com/user/TheChernoProject\">TheChernoProject yt channel</a></li>\n</ul>\n<h2>Guidelines</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/isocpp/CppCoreGuidelines\">CppCoreGuidelines</a></p>\n<p>Very useful compilation of best practices using modern C++ by creators of the language.</p>\n</li>\n<li>\n<p><a href=\"https://google.github.io/styleguide/cppguide.html\">Google C++ style guide</a></p>\n</li>\n</ul>\n<h2>Websites</h2>\n<ul>\n<li>\n<p><a href=\"https://isocpp.org/\">C++ standard site</a></p>\n</li>\n<li>\n<p><a href=\"http://cppreference.com/\">C++ online reference</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/\">Stack Overflow</a></p>\n<p>Stack Overflow is a question and answer site for professional and enthusiast programmers.</p>\n</li>\n<li>\n<p><a href=\"https://www.quora.com/\">Quora</a></p>\n<p>Quora is an American question-and-answer website where questions are asked, answered, and edited by Internet users,\neither factually, or in the form of opinions.</p>\n</li>\n<li>\n<p><a href=\"https://www.reddit.com/r/cpp_questions/\">C++ subreddit</a></p>\n</li>\n</ul>\n<h2>Similar resources</h2>\n<p>The best way to find desired information is to search the web. So here are some starter links:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list\">Definitive list</a> of books at\nstackoverflow</li>\n<li><a href=\"https://github.com/rigtorp/awesome-modern-cpp\">Repository</a> with compilation of useful resources on C++</li>\n<li><a href=\"https://github.com/gibsjose/cpp-cheat-sheet\">C++ cheat-sheet</a></li>\n</ul>\n<h1>Okay! What’s next?</h1>\n<p>When you learned some C++ it is time to go and get some real-world experience. Here comes the <a href=\"cppREPOS.html\">list of repositories</a> to contribute to. Or if you want to, start learning <a href=\"../tools/README.html\">C++ dev tools</a></p>\n",
      "id": 3
    },
    {
      "path": "etc/afterword.md",
      "url": "etc/afterword.html",
      "content": "# Afterword\r\n\r\nWay of C++ developer is not an ordinary programmer way at all. This is one of rare programming languages aimed at performance and elegance but popular at the same time. So during reading of this repository you've learned a lot about C++, and ready to go and get a solid job in this field.  Or if you want, you can just start your project, I call this `The art of programming`. Or you could do something else. The choice is yours.\r\n\r\n\r\n\r\nDoes not matter what path you'll choose. The only thing that matters is that you should **have fun** working with it. And I wish you can call this not \"work\" in ordinary sense of this word, but \"my art\". \r\n\r\nI won't tell you to write quality software, after reading all this, you can't write totally \"bad\" code. Even if you write good software from nowadays perspective, all modern rules was developed by someone, so I'm not sure it will be that \"good\" in the future. \r\n\r\nDespite this seemingly sad words i encourage YOU to **think yourself**! Think yourself, but **learn from others**;) So here is the summary:\r\n\r\n1. Have fun developing art\r\n2. Think yourself, but learn from others\r\n\r\n# Topics not (aimed to be) covered, but useful\r\n\r\n1. Unix and bash scripting\r\n2. Assembly language\r\n3. Algorithms and data structures\r\n",
      "html": "<h1>Afterword</h1>\n<p>Way of C++ developer is not an ordinary programmer way at all. This is one of rare programming languages aimed at performance and elegance but popular at the same time. So during reading of this repository you’ve learned a lot about C++, and ready to go and get a solid job in this field.  Or if you want, you can just start your project, I call this <code>The art of programming</code>. Or you could do something else. The choice is yours.</p>\n<p>Does not matter what path you’ll choose. The only thing that matters is that you should <strong>have fun</strong> working with it. And I wish you can call this not “work” in ordinary sense of this word, but “my art”.</p>\n<p>I won’t tell you to write quality software, after reading all this, you can’t write totally “bad” code. Even if you write good software from nowadays perspective, all modern rules was developed by someone, so I’m not sure it will be that “good” in the future.</p>\n<p>Despite this seemingly sad words i encourage YOU to <strong>think yourself</strong>! Think yourself, but <strong>learn from others</strong>;) So here is the summary:</p>\n<ol>\n<li>Have fun developing art</li>\n<li>Think yourself, but learn from others</li>\n</ol>\n<h1>Topics not (aimed to be) covered, but useful</h1>\n<ol>\n<li>Unix and bash scripting</li>\n<li>Assembly language</li>\n<li>Algorithms and data structures</li>\n</ol>\n",
      "id": 4
    },
    {
      "path": "tools/README.md",
      "url": "tools/README.html",
      "content": "# List\nThis is the list of programs and tools for C++ development, that is useful to work with.\n\n## Build\n\n### [Preface](build/README.md)\n\n- [cmake](build/CMake.md) :white_check_mark:\n- [make](build/make.md) :white_check_mark:\n\n## Static Code Analysis and Formatting\n\n### [Preface](static-analysis/README.md)\n\n- [clang-format](static-analysis/clang-format.md) :white_check_mark:\n- [clang-tidy](static-analysis/clang-tidy.md) :white_check_mark:\n- Coverity\n- [Cppcheck](static-analysis/cppcheck.md) :white_check_mark:\n\n## Dynamic Code Analysis and Debuggers\n\n### [Preface](dynamic-analysis/README.md)\n\n- [GDB](dynamic-analysis/gdb.md) :white_check_mark:\n- [valgrind](dynamic-analysis/valgrind.md) :white_check_mark:\n- [cachegrind](dynamic-analysis/cachegrind.md) :white_check_mark:\n\n## Compilers\n\n### [Preface](compilers/README.md)\n\n- [GCC](compilers/gcc.md) :white_check_mark:\n- [clang](compilers/clang.md) :white_check_mark:\n\n## Editors and IDEs\n\n### [Preface](editors-ides/README.md)\n\n- Atom\n- CLion\n- QT creator\n- [Sublime Text](editors-ides/sublime.md) :white_check_mark:\n- [vim](editors-ides/vim.md) :white_check_mark:\n- VS\n- [VS code](editors-ides/vscode.md) :white_check_mark:\n\n## Testing\n\n### [Preface](testing/README.md)\n\n- catch\n- [Google Test](testing/gtest.md)\n\n## Docs\n\n### [Preface](docs/README.md)\n\n- [doxygen](docs/doxygen.md) :white_check_mark: \n\n## Collaborative development\n\n### [Preface](collab/README.md)\n\n- git\n- github\n\n## Etc\n\n### [Preface](etc/README.md)\n\n- AFL\n- Coveralls\n- cscope\n- LCOV\n- objdump\n- perf\n- strace\n- some of CI\n\n# [Afterword](../etc/afterword.md)\n",
      "html": "<h1>List</h1>\n<p>This is the list of programs and tools for C++ development, that is useful to work with.</p>\n<h2>Build</h2>\n<h3><a href=\"build/README.html\">Preface</a></h3>\n<ul>\n<li><a href=\"build/CMake.html\">cmake</a> :white_check_mark:</li>\n<li><a href=\"build/make.html\">make</a> :white_check_mark:</li>\n</ul>\n<h2>Static Code Analysis and Formatting</h2>\n<h3><a href=\"static-analysis/README.html\">Preface</a></h3>\n<ul>\n<li><a href=\"static-analysis/clang-format.html\">clang-format</a> :white_check_mark:</li>\n<li><a href=\"static-analysis/clang-tidy.html\">clang-tidy</a> :white_check_mark:</li>\n<li>Coverity</li>\n<li><a href=\"static-analysis/cppcheck.html\">Cppcheck</a> :white_check_mark:</li>\n</ul>\n<h2>Dynamic Code Analysis and Debuggers</h2>\n<h3><a href=\"dynamic-analysis/README.html\">Preface</a></h3>\n<ul>\n<li><a href=\"dynamic-analysis/gdb.html\">GDB</a> :white_check_mark:</li>\n<li><a href=\"dynamic-analysis/valgrind.html\">valgrind</a> :white_check_mark:</li>\n<li><a href=\"dynamic-analysis/cachegrind.html\">cachegrind</a> :white_check_mark:</li>\n</ul>\n<h2>Compilers</h2>\n<h3><a href=\"compilers/README.html\">Preface</a></h3>\n<ul>\n<li><a href=\"compilers/gcc.html\">GCC</a> :white_check_mark:</li>\n<li><a href=\"compilers/clang.html\">clang</a> :white_check_mark:</li>\n</ul>\n<h2>Editors and IDEs</h2>\n<h3><a href=\"editors-ides/README.html\">Preface</a></h3>\n<ul>\n<li>Atom</li>\n<li>CLion</li>\n<li>QT creator</li>\n<li><a href=\"editors-ides/sublime.html\">Sublime Text</a> :white_check_mark:</li>\n<li><a href=\"editors-ides/vim.html\">vim</a> :white_check_mark:</li>\n<li>VS</li>\n<li><a href=\"editors-ides/vscode.html\">VS code</a> :white_check_mark:</li>\n</ul>\n<h2>Testing</h2>\n<h3><a href=\"testing/README.html\">Preface</a></h3>\n<ul>\n<li>catch</li>\n<li><a href=\"testing/gtest.html\">Google Test</a></li>\n</ul>\n<h2>Docs</h2>\n<h3><a href=\"docs/README.html\">Preface</a></h3>\n<ul>\n<li><a href=\"docs/doxygen.html\">doxygen</a> :white_check_mark:</li>\n</ul>\n<h2>Collaborative development</h2>\n<h3><a href=\"collab/README.html\">Preface</a></h3>\n<ul>\n<li>git</li>\n<li>github</li>\n</ul>\n<h2>Etc</h2>\n<h3><a href=\"etc/README.html\">Preface</a></h3>\n<ul>\n<li>AFL</li>\n<li>Coveralls</li>\n<li>cscope</li>\n<li>LCOV</li>\n<li>objdump</li>\n<li>perf</li>\n<li>strace</li>\n<li>some of CI</li>\n</ul>\n<h1><a href=\"../etc/afterword.html\">Afterword</a></h1>\n",
      "id": 5
    },
    {
      "path": "tools/build/CMake.md",
      "url": "tools/build/CMake.html",
      "content": "# [CMake](https://cmake.org/)\n\nis an open-source, cross-platform family of tools designed to build, test and package software. It is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. \n\n# Resources\n\n1. First you should read a nice introduction [here](https://medium.com/@onur.dundar1/cmake-tutorial-585dd180109b). \n2. Also there [are](https://cmake.org/cmake-tutorial/) official tutorial.\n3. And [documentation](https://cmake.org/cmake-tutorial/).\n\n# Projects \n\nSee [success stories](https://cmake.org/success/) of CMake project.\n\nThere are some projects that i'd like to recommend myself:\n\n - Beginner\n   - Common algorithms [repo](https://github.com/faheel)\n   - Arbitrary-sized integer type [repo](https://github.com/faheel/BigInt)\n - Intermediate\n   - Guidlines Support Library [repo](https://github.com/microsoft/GSL)\n- Advanced\n  - [Catch2](https://github.com/catchorg/Catch2) test framework",
      "html": "<h1><a href=\"https://cmake.org/\">CMake</a></h1>\n<p>is an open-source, cross-platform family of tools designed to build, test and package software. It is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice.</p>\n<h1>Resources</h1>\n<ol>\n<li>First you should read a nice introduction <a href=\"https://medium.com/@onur.dundar1/cmake-tutorial-585dd180109b\">here</a>.</li>\n<li>Also there <a href=\"https://cmake.org/cmake-tutorial/\">are</a> official tutorial.</li>\n<li>And <a href=\"https://cmake.org/cmake-tutorial/\">documentation</a>.</li>\n</ol>\n<h1>Projects</h1>\n<p>See <a href=\"https://cmake.org/success/\">success stories</a> of CMake project.</p>\n<p>There are some projects that i’d like to recommend myself:</p>\n<ul>\n<li>Beginner\n<ul>\n<li>Common algorithms <a href=\"https://github.com/faheel\">repo</a></li>\n<li>Arbitrary-sized integer type <a href=\"https://github.com/faheel/BigInt\">repo</a></li>\n</ul>\n</li>\n<li>Intermediate\n<ul>\n<li>Guidlines Support Library <a href=\"https://github.com/microsoft/GSL\">repo</a></li>\n</ul>\n</li>\n<li>Advanced\n<ul>\n<li><a href=\"https://github.com/catchorg/Catch2\">Catch2</a> test framework</li>\n</ul>\n</li>\n</ul>\n",
      "id": 6
    },
    {
      "path": "tools/build/README.md",
      "url": "tools/build/README.html",
      "content": "# What?\n\n**Build system** is a tool that is used for **build automation**. The later one involves scripting the process of compiling source code into binary code.\n\n# Why?\n\nWhile the project is small it is easy to type all the commands to compile it(for example `g++ source.cpp -o executable`). But when it comes to large or medium projects the common practice is to automate this process, in order to save a lot of time. No need to type all commands, just type command for project compilation that will invoke build system script which will do all the work for you. This saves time, you type all command first time in script and then edit it when needed.\n",
      "html": "<h1>What?</h1>\n<p><strong>Build system</strong> is a tool that is used for <strong>build automation</strong>. The later one involves scripting the process of compiling source code into binary code.</p>\n<h1>Why?</h1>\n<p>While the project is small it is easy to type all the commands to compile it(for example <code>g++ source.cpp -o executable</code>). But when it comes to large or medium projects the common practice is to automate this process, in order to save a lot of time. No need to type all commands, just type command for project compilation that will invoke build system script which will do all the work for you. This saves time, you type all command first time in script and then edit it when needed.</p>\n",
      "id": 7
    },
    {
      "path": "tools/build/make.md",
      "url": "tools/build/make.html",
      "content": "# [Make](https://en.wikipedia.org/wiki/Make_(software))\n\nis a build automation tool that creates executables from sources, with recipe specified in a special file named **`Makefile`**. You write simple tutorial of how your program should be build. Then user of your software needs to run just one command to install it. \n\nWhen project is simple you can manually enter commands for few files to compile and maybe link them. But when projects become larger, it saves a lot of typing time, just run make, no need to repeat yourself([DRY]([https://en.wikipedia.org/wiki/Don%27t_repeat_yourself](https://en.wikipedia.org/wiki/Don't_repeat_yourself))).\n\n# Resources\n\n1. Very useful and descriptive introduction [tutorial](https://gist.github.com/isaacs/62a2d1825d04437c6f08)\n2. [Tutorial](https://makefiletutorial.com/) that covers most used functionality \n3. [Compiling, Linking and Building C++ applications](https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html)\n4. [Cheat-sheet](https://gist.github.com/evertrol/4b6fd05f3b6be2b331c60638b1af7101) to recap material\n\n# Projects \n\nUsing make is a common practice even in small projects. But nowadays **`Makefile`**s are being generated automatically with CMake. So you can check CMake section [here](CMake.md).",
      "html": "<h1><a href=\"https://en.wikipedia.org/wiki/Make_(software)\">Make</a></h1>\n<p>is a build automation tool that creates executables from sources, with recipe specified in a special file named <strong><code>Makefile</code></strong>. You write simple tutorial of how your program should be build. Then user of your software needs to run just one command to install it.</p>\n<p>When project is simple you can manually enter commands for few files to compile and maybe link them. But when projects become larger, it saves a lot of typing time, just run make, no need to repeat yourself(<a href=\"%5Bhttps://en.wikipedia.org/wiki/Don%27t_repeat_yourself%5D(https://en.wikipedia.org/wiki/Don't_repeat_yourself)\">DRY</a>).</p>\n<h1>Resources</h1>\n<ol>\n<li>Very useful and descriptive introduction <a href=\"https://gist.github.com/isaacs/62a2d1825d04437c6f08\">tutorial</a></li>\n<li><a href=\"https://makefiletutorial.com/\">Tutorial</a> that covers most used functionality</li>\n<li><a href=\"https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html\">Compiling, Linking and Building C++ applications</a></li>\n<li><a href=\"https://gist.github.com/evertrol/4b6fd05f3b6be2b331c60638b1af7101\">Cheat-sheet</a> to recap material</li>\n</ol>\n<h1>Projects</h1>\n<p>Using make is a common practice even in small projects. But nowadays **<code>Makefile</code>**s are being generated automatically with CMake. So you can check CMake section <a href=\"CMake.html\">here</a>.</p>\n",
      "id": 8
    },
    {
      "path": "tools/compilers/README.md",
      "url": "tools/compilers/README.html",
      "content": "# What?\n\nCompiler is the main instrument for a C++ programmer. It is an instrument of transforming C++ code readable by human to machine code readable by PC.\n\n# Why?\n\nMAIN INSTRUMENT\n",
      "html": "<h1>What?</h1>\n<p>Compiler is the main instrument for a C++ programmer. It is an instrument of transforming C++ code readable by human to machine code readable by PC.</p>\n<h1>Why?</h1>\n<p>MAIN INSTRUMENT</p>\n",
      "id": 9
    },
    {
      "path": "tools/compilers/clang.md",
      "url": "tools/compilers/clang.html",
      "content": "# [clang](https://clang.llvm.org/)\n\nis a [compiler front end](https://en.wikipedia.org/wiki/Compiler#Fro) for the C, C++ and some other programming languages. It uses the [LLVM compiler](https://en.wikipedia.org/wiki/LLVM) infrastructure as its [back end](https://en.wikipedia.org/wiki/Compiler#Back_end).\n\n# Resources\n\n1. [Getting started](https://clang.llvm.org/get_started.html)\n2. User's [manual](https://clang.llvm.org/docs/UsersManual.html#convergent)(a bit complicated, but in detail)\n3. Command line argument [reference](https://clang.llvm.org/docs/ClangCommandLineReference.html)\n",
      "html": "<h1><a href=\"https://clang.llvm.org/\">clang</a></h1>\n<p>is a <a href=\"https://en.wikipedia.org/wiki/Compiler#Fro\">compiler front end</a> for the C, C++ and some other programming languages. It uses the <a href=\"https://en.wikipedia.org/wiki/LLVM\">LLVM compiler</a> infrastructure as its <a href=\"https://en.wikipedia.org/wiki/Compiler#Back_end\">back end</a>.</p>\n<h1>Resources</h1>\n<ol>\n<li><a href=\"https://clang.llvm.org/get_started.html\">Getting started</a></li>\n<li>User’s <a href=\"https://clang.llvm.org/docs/UsersManual.html#convergent\">manual</a>(a bit complicated, but in detail)</li>\n<li>Command line argument <a href=\"https://clang.llvm.org/docs/ClangCommandLineReference.html\">reference</a></li>\n</ol>\n",
      "id": 10
    },
    {
      "path": "tools/compilers/gcc.md",
      "url": "tools/compilers/gcc.html",
      "content": "# [gcc](https://gcc.gnu.org/)\n\nis a compiler system produced by the GNU Project supporting various programming languages. GCC is a key component of the GNU toolchain and the standard compiler for most projects related to GNU and Linux, including the Linux kernel. To be precise we need only part of this compiler collection, C++ part - `g++`.\n\n# Resources\n\n1. Useful [guide](https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html)(1st part)\n2. Detailed [cheat-sheet](https://caiorss.github.io/C-Cpp-Notes/compiler-flags-options.html)\n3. [Cheat-sheet](https://www.thegeekstuff.com/2012/10/gcc-compiler-options/) with examples\n4. Optimisation [flags](https://www.rapidtables.com/code/linux/gcc/gcc-o.html)\n5. Some other [useful flags](https://stackoverflow.com/questions/3375697/useful-gcc-flags-for-c)\n",
      "html": "<h1><a href=\"https://gcc.gnu.org/\">gcc</a></h1>\n<p>is a compiler system produced by the GNU Project supporting various programming languages. GCC is a key component of the GNU toolchain and the standard compiler for most projects related to GNU and Linux, including the Linux kernel. To be precise we need only part of this compiler collection, C++ part - <code>g++</code>.</p>\n<h1>Resources</h1>\n<ol>\n<li>Useful <a href=\"https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html\">guide</a>(1st part)</li>\n<li>Detailed <a href=\"https://caiorss.github.io/C-Cpp-Notes/compiler-flags-options.html\">cheat-sheet</a></li>\n<li><a href=\"https://www.thegeekstuff.com/2012/10/gcc-compiler-options/\">Cheat-sheet</a> with examples</li>\n<li>Optimisation <a href=\"https://www.rapidtables.com/code/linux/gcc/gcc-o.html\">flags</a></li>\n<li>Some other <a href=\"https://stackoverflow.com/questions/3375697/useful-gcc-flags-for-c\">useful flags</a></li>\n</ol>\n",
      "id": 11
    },
    {
      "path": "tools/docs/README.md",
      "url": "tools/docs/README.html",
      "content": "# What?\n\nDocumentation is a detailed unambiguous description of your code, mostly in written form. Description of what every autonomous piece of code expects to take as an input and what it returns as an output.\n\n# Why?\n\nBecause everybody who wants to use your program should know how to do it and what he can do with it.\n\n# Also\n\nRead [this](https://www.tutorialspoint.com/programming_methodologies/programming_methodologies_program_documentation.htm) to learn more about documentation and it's types. \n",
      "html": "<h1>What?</h1>\n<p>Documentation is a detailed unambiguous description of your code, mostly in written form. Description of what every autonomous piece of code expects to take as an input and what it returns as an output.</p>\n<h1>Why?</h1>\n<p>Because everybody who wants to use your program should know how to do it and what he can do with it.</p>\n<h1>Also</h1>\n<p>Read <a href=\"https://www.tutorialspoint.com/programming_methodologies/programming_methodologies_program_documentation.htm\">this</a> to learn more about documentation and it’s types.</p>\n",
      "id": 12
    },
    {
      "path": "tools/docs/doxygen.md",
      "url": "tools/docs/doxygen.html",
      "content": "# [doxygen](http://www.doxygen.nl/)\n\nis a documentation generator, a tool for writing software reference documentation. The documentation is written within code, and is thus relatively easy to keep up to date. Doxygen can cross reference documentation and code, so that the reader of a document can easily refer to the actual code.\n\n# Resources\n\n1. [Getting started](http://www.doxygen.nl/manual/starting.html)\n2. [How to](http://www.doxygen.nl/manual/docblocks.html) comment your code\n3. [Another](https://flcwiki.desy.de/How%20to%20document%20your%20code%20using%20doxygen) good and simple tutorial\n\n# Projects\n\n[Here are the list](http://www.doxygen.nl/projects.html) of projects using doxygen",
      "html": "<h1><a href=\"http://www.doxygen.nl/\">doxygen</a></h1>\n<p>is a documentation generator, a tool for writing software reference documentation. The documentation is written within code, and is thus relatively easy to keep up to date. Doxygen can cross reference documentation and code, so that the reader of a document can easily refer to the actual code.</p>\n<h1>Resources</h1>\n<ol>\n<li><a href=\"http://www.doxygen.nl/manual/starting.html\">Getting started</a></li>\n<li><a href=\"http://www.doxygen.nl/manual/docblocks.html\">How to</a> comment your code</li>\n<li><a href=\"https://flcwiki.desy.de/How%20to%20document%20your%20code%20using%20doxygen\">Another</a> good and simple tutorial</li>\n</ol>\n<h1>Projects</h1>\n<p><a href=\"http://www.doxygen.nl/projects.html\">Here are the list</a> of projects using doxygen</p>\n",
      "id": 13
    },
    {
      "path": "tools/dynamic-analysis/README.md",
      "url": "tools/dynamic-analysis/README.html",
      "content": "# What?\n\nDynamic analysis is the code analysis that could only be done during program run. This also means that it can\nonly be done when program is already compiled, so as a consequence error detected by this kind of analysis is more intricate. When performing the test launch program can be executed on both real and virtual processor.\n\n# Why?\n\nBecause when we write our code, we do care about bugs. So there are tools that help us to find and  fix them automatically at late stages.\n\nDynamic analysis is often performed in an effort to uncover subtle defects or vulnerabilities. The principal advantage of dynamic analysis is the fact that it can reveal errors that do not manifest themselves until a disaster occurs weeks, months or years after release. \n\n# Also\n\nNevertheless, dynamic analysis may be the second step in a comprehensive software quality-control regime. Before dynamic analysis has been done we may use static analysis to reveal errors on early stages. In computer terminology, static means fixed, while dynamic means capable of action and/or change. Dynamic analysis involves the testing and evaluation of a program based on execution. Static and dynamic analysis, considered together, are sometimes referred to as glass-box testing.",
      "html": "<h1>What?</h1>\n<p>Dynamic analysis is the code analysis that could only be done during program run. This also means that it can\nonly be done when program is already compiled, so as a consequence error detected by this kind of analysis is more intricate. When performing the test launch program can be executed on both real and virtual processor.</p>\n<h1>Why?</h1>\n<p>Because when we write our code, we do care about bugs. So there are tools that help us to find and  fix them automatically at late stages.</p>\n<p>Dynamic analysis is often performed in an effort to uncover subtle defects or vulnerabilities. The principal advantage of dynamic analysis is the fact that it can reveal errors that do not manifest themselves until a disaster occurs weeks, months or years after release.</p>\n<h1>Also</h1>\n<p>Nevertheless, dynamic analysis may be the second step in a comprehensive software quality-control regime. Before dynamic analysis has been done we may use static analysis to reveal errors on early stages. In computer terminology, static means fixed, while dynamic means capable of action and/or change. Dynamic analysis involves the testing and evaluation of a program based on execution. Static and dynamic analysis, considered together, are sometimes referred to as glass-box testing.</p>\n",
      "id": 14
    },
    {
      "path": "tools/dynamic-analysis/cachegrind.md",
      "url": "tools/dynamic-analysis/cachegrind.html",
      "content": "# [cachegrind](http://valgrind.org/docs/manual/cg-manual.html)\n\nis a cache profiler. It performs detailed simulation of the I1, D1 and L2 caches, look into [this](https://www.quora.com/What-are-the-types-of-cache-memory) first and then [this](https://www.tldp.org/HOWTO/Valgrind-HOWTO/deeper.html)(**part about cache profiling**) in your [CPU](https://en.wikipedia.org/wiki/Central_processing_unit) and so can accurately pinpoint the sources of cache misses in your code. It identifies the number of cache misses, memory references and instructions executed for each line of source code, with per-function, per-module and whole-program summaries. It is useful with programs written in any language. Cachegrind runs programs about 20--100x slower than normal.\n\n# Resources\n\n1. Introduction [tutorial](https://www.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-40/Nice/RuleRefinement/bin/valgrind-3.2.0/docs/html/cg-manual.html)\n2. Official [documentation](http://valgrind.org/docs/manual/cg-manual.html)\n3. What does caches names [mean](https://stackoverflow.com/questions/20172216/how-do-you-interpret-cachegrind-output-for-caching-misses)?\n\n# Bonus\n\n[Here](detailed_cachegrind) is the Makefile that is used to generate detailed and line-by-line cache profiler files . Good practice of [bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell)) and cachegrind, saves some time recalling its principles.",
      "html": "<h1><a href=\"http://valgrind.org/docs/manual/cg-manual.html\">cachegrind</a></h1>\n<p>is a cache profiler. It performs detailed simulation of the I1, D1 and L2 caches, look into <a href=\"https://www.quora.com/What-are-the-types-of-cache-memory\">this</a> first and then <a href=\"https://www.tldp.org/HOWTO/Valgrind-HOWTO/deeper.html\">this</a>(<strong>part about cache profiling</strong>) in your <a href=\"https://en.wikipedia.org/wiki/Central_processing_unit\">CPU</a> and so can accurately pinpoint the sources of cache misses in your code. It identifies the number of cache misses, memory references and instructions executed for each line of source code, with per-function, per-module and whole-program summaries. It is useful with programs written in any language. Cachegrind runs programs about 20–100x slower than normal.</p>\n<h1>Resources</h1>\n<ol>\n<li>Introduction <a href=\"https://www.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-40/Nice/RuleRefinement/bin/valgrind-3.2.0/docs/html/cg-manual.html\">tutorial</a></li>\n<li>Official <a href=\"http://valgrind.org/docs/manual/cg-manual.html\">documentation</a></li>\n<li>What does caches names <a href=\"https://stackoverflow.com/questions/20172216/how-do-you-interpret-cachegrind-output-for-caching-misses\">mean</a>?</li>\n</ol>\n<h1>Bonus</h1>\n<p><a href=\"detailed_cachegrind\">Here</a> is the Makefile that is used to generate detailed and line-by-line cache profiler files . Good practice of <a href=\"https://en.wikipedia.org/wiki/Bash_(Unix_shell)\">bash</a> and cachegrind, saves some time recalling its principles.</p>\n",
      "id": 15
    },
    {
      "path": "tools/dynamic-analysis/gdb.md",
      "url": "tools/dynamic-analysis/gdb.html",
      "content": "# [GDB](https://www.gnu.org/software/gdb/)\n\nis the GNU Project debugger. Allows you to see what is going on \"inside\" another program while it executes -- or what another program was doing at the moment it crashed.\n\n# Resources\n\n1. [Tutorial](https://www.tutorialspoint.com/gnu_debugger/index.htm)\n2. Another more theoretical [tutorial](https://www.cs.cmu.edu/~gilpin/tutorial/)\n3. [Cheat-sheet](https://www.cs.cmu.edu/~gilpin/tutorial/)\n",
      "html": "<h1><a href=\"https://www.gnu.org/software/gdb/\">GDB</a></h1>\n<p>is the GNU Project debugger. Allows you to see what is going on “inside” another program while it executes – or what another program was doing at the moment it crashed.</p>\n<h1>Resources</h1>\n<ol>\n<li><a href=\"https://www.tutorialspoint.com/gnu_debugger/index.htm\">Tutorial</a></li>\n<li>Another more theoretical <a href=\"https://www.cs.cmu.edu/~gilpin/tutorial/\">tutorial</a></li>\n<li><a href=\"https://www.cs.cmu.edu/~gilpin/tutorial/\">Cheat-sheet</a></li>\n</ol>\n",
      "id": 16
    },
    {
      "path": "tools/dynamic-analysis/valgrind.md",
      "url": "tools/dynamic-analysis/valgrind.html",
      "content": "# [valgrind](http://www.valgrind.org/)\n\nis a tool suite, that provides a number of [debugging](https://en.wikipedia.org/wiki/Debugging) and [profiling](https://en.wikipedia.org/wiki/Profiling_(computer_programming)) tools that help you make your programs faster and more correct. The most popular of these tools is called `Memcheck`. It can detect many memory-related errors that are common in C and C++ programs and that can lead to crashes and unpredictable behaviour.\n\n# Resources\n\n1. [How to](https://stackoverflow.com/questions/5134891/how-do-i-use-valgrind-to-find-memory-leaks) guide\n2. [Quick start guide](http://www.valgrind.org/docs/manual/QuickStart.html)\n3. [Valgrind core](http://valgrind.org/docs/manual/manual-core.html)(most useful tutorial in aspect of ratio usefulness/detalization)\n4. [Docs](http://www.valgrind.org/docs/manual/manual.html)\n\n# Bonus\n\n1. [About naming](http://www.valgrind.org/docs/manual/faq.html#faq.background)\n2. [List of valgrind tools](http://www.valgrind.org/info/tools.html)\n",
      "html": "<h1><a href=\"http://www.valgrind.org/\">valgrind</a></h1>\n<p>is a tool suite, that provides a number of <a href=\"https://en.wikipedia.org/wiki/Debugging\">debugging</a> and <a href=\"https://en.wikipedia.org/wiki/Profiling_(computer_programming)\">profiling</a> tools that help you make your programs faster and more correct. The most popular of these tools is called <code>Memcheck</code>. It can detect many memory-related errors that are common in C and C++ programs and that can lead to crashes and unpredictable behaviour.</p>\n<h1>Resources</h1>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/5134891/how-do-i-use-valgrind-to-find-memory-leaks\">How to</a> guide</li>\n<li><a href=\"http://www.valgrind.org/docs/manual/QuickStart.html\">Quick start guide</a></li>\n<li><a href=\"http://valgrind.org/docs/manual/manual-core.html\">Valgrind core</a>(most useful tutorial in aspect of ratio usefulness/detalization)</li>\n<li><a href=\"http://www.valgrind.org/docs/manual/manual.html\">Docs</a></li>\n</ol>\n<h1>Bonus</h1>\n<ol>\n<li><a href=\"http://www.valgrind.org/docs/manual/faq.html#faq.background\">About naming</a></li>\n<li><a href=\"http://www.valgrind.org/info/tools.html\">List of valgrind tools</a></li>\n</ol>\n",
      "id": 17
    },
    {
      "path": "tools/editors-ides/README.md",
      "url": "tools/editors-ides/README.html",
      "content": "# What?\n\n**Editor** is an essential instrument to write code in, i assume it is obvious by now.\n\n**[IDE](https://en.wikipedia.org/wiki/Integrated_development_environment)(Integrated Development Environment)** is a software application that provides comprehensive facilities to computer programmers for software development.\n\n# Why?\n\n**Editor** - MAIN INSTRUMENT\n\n**IDE** - speeds up workflow\n",
      "html": "<h1>What?</h1>\n<p><strong>Editor</strong> is an essential instrument to write code in, i assume it is obvious by now.</p>\n<p><strong><a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\">IDE</a>(Integrated Development Environment)</strong> is a software application that provides comprehensive facilities to computer programmers for software development.</p>\n<h1>Why?</h1>\n<p><strong>Editor</strong> - MAIN INSTRUMENT</p>\n<p><strong>IDE</strong> - speeds up workflow</p>\n",
      "id": 18
    },
    {
      "path": "tools/editors-ides/sublime.md",
      "url": "tools/editors-ides/sublime.html",
      "content": "# [Sublime Text](https://www.sublimetext.com/)\n\nis a sophisticated text editor for code, markup and prose\n\n# Resources\n\n1. [Overview](https://www.openvim.com/)\n2. Interactive [tutorial](https://sublimetutor.com/)\n3. [Cheat-sheet](https://www.shortcutfoo.com/app/dojos/sublime-text-3-win/cheatsheet)\n",
      "html": "<h1><a href=\"https://www.sublimetext.com/\">Sublime Text</a></h1>\n<p>is a sophisticated text editor for code, markup and prose</p>\n<h1>Resources</h1>\n<ol>\n<li><a href=\"https://www.openvim.com/\">Overview</a></li>\n<li>Interactive <a href=\"https://sublimetutor.com/\">tutorial</a></li>\n<li><a href=\"https://www.shortcutfoo.com/app/dojos/sublime-text-3-win/cheatsheet\">Cheat-sheet</a></li>\n</ol>\n",
      "id": 19
    },
    {
      "path": "tools/editors-ides/vim.md",
      "url": "tools/editors-ides/vim.html",
      "content": "# [vim](https://www.vim.org/)\n\nis a highly configurable text editor for efficiently creating and changing any kind of text. It is included as \"vi\" with most UNIX systems and with Apple OS X.\n\n# Resources\n\n1. Interactive [tutorial](https://www.openvim.com/)\n2. [Cheat-sheet](https://devhints.io/vim)\n\n----------\n\n# **`ANSWER TO THE MOST FREQUENT QUESTION`**\n\n----------\n\n**[How to exit the vim editor?](https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor)**\n\n",
      "html": "<h1><a href=\"https://www.vim.org/\">vim</a></h1>\n<p>is a highly configurable text editor for efficiently creating and changing any kind of text. It is included as “vi” with most UNIX systems and with Apple OS X.</p>\n<h1>Resources</h1>\n<ol>\n<li>Interactive <a href=\"https://www.openvim.com/\">tutorial</a></li>\n<li><a href=\"https://devhints.io/vim\">Cheat-sheet</a></li>\n</ol>\n<hr>\n<h1><strong><code>ANSWER TO THE MOST FREQUENT QUESTION</code></strong></h1>\n<hr>\n<p><strong><a href=\"https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor\">How to exit the vim editor?</a></strong></p>\n",
      "id": 20
    },
    {
      "path": "tools/editors-ides/vscode.md",
      "url": "tools/editors-ides/vscode.html",
      "content": "# [Visual Studio Code](https://code.visualstudio.com/)\n\nis a text editor. Code editing. Redefined. Free. Built on open source. Runs everywhere.\n\n# Resources\n\n1. [Getting started](https://code.visualstudio.com/docs/introvideos/basics)\n2. [Cheat-sheet](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf)\n",
      "html": "<h1><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></h1>\n<p>is a text editor. Code editing. Redefined. Free. Built on open source. Runs everywhere.</p>\n<h1>Resources</h1>\n<ol>\n<li><a href=\"https://code.visualstudio.com/docs/introvideos/basics\">Getting started</a></li>\n<li><a href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf\">Cheat-sheet</a></li>\n</ol>\n",
      "id": 21
    },
    {
      "path": "tools/static-analysis/README.md",
      "url": "tools/static-analysis/README.html",
      "content": "# What?\n\nStatic analysis, also called static code analysis, is a method of computer program debugging that is done by examining the code without executing the program. The process provides an understanding of the code structure, and can help to ensure that the code adheres to industry standards. Automated tools can assist programmers and developers in carrying out static analysis. The process of scrutinizing code by visual inspection alone (by looking at a printout, for example), without the assistance of automated tools, is sometimes called program understanding or program comprehension.\n\n# Why?\n\nBecause when we write our code, we do care about bugs. So there are tools that help us to find and  fix them automatically at early stages.\n\nThe principal advantage of static analysis is the fact that it can reveal errors that do not manifest themselves until a disaster occurs weeks, months or years after release. \n\n# Also\n\nNevertheless, static analysis is only a first step in a comprehensive software quality-control regime. After static analysis has been done, dynamic analysis is often performed in an effort to uncover subtle defects or vulnerabilities. In computer terminology, static means fixed, while dynamic means capable of action and/or change. Dynamic analysis involves the testing and evaluation of a program based on execution. Static and dynamic analysis, considered together, are sometimes referred to as glass-box testing.\n\n\n\n----\n\n*[source](https://searchwindevelopment.techtarget.com/definition/static-analysis)",
      "html": "<h1>What?</h1>\n<p>Static analysis, also called static code analysis, is a method of computer program debugging that is done by examining the code without executing the program. The process provides an understanding of the code structure, and can help to ensure that the code adheres to industry standards. Automated tools can assist programmers and developers in carrying out static analysis. The process of scrutinizing code by visual inspection alone (by looking at a printout, for example), without the assistance of automated tools, is sometimes called program understanding or program comprehension.</p>\n<h1>Why?</h1>\n<p>Because when we write our code, we do care about bugs. So there are tools that help us to find and  fix them automatically at early stages.</p>\n<p>The principal advantage of static analysis is the fact that it can reveal errors that do not manifest themselves until a disaster occurs weeks, months or years after release.</p>\n<h1>Also</h1>\n<p>Nevertheless, static analysis is only a first step in a comprehensive software quality-control regime. After static analysis has been done, dynamic analysis is often performed in an effort to uncover subtle defects or vulnerabilities. In computer terminology, static means fixed, while dynamic means capable of action and/or change. Dynamic analysis involves the testing and evaluation of a program based on execution. Static and dynamic analysis, considered together, are sometimes referred to as glass-box testing.</p>\n<hr>\n<p>*<a href=\"https://searchwindevelopment.techtarget.com/definition/static-analysis\">source</a></p>\n",
      "id": 22
    },
    {
      "path": "tools/static-analysis/clang-format.md",
      "url": "tools/static-analysis/clang-format.html",
      "content": "# [ClangFormat](https://clang.llvm.org/docs/ClangFormat.html)\nis a tool for automatically stylizing your code, using custom or predefined code-style templates.\n**Almost always ClangFormat**(or other formatting tools) as a rule, because:\n1. Less work for you as a programmer\n2. Less human mistakes during stylizing\n3. It doesn't matter what code-style your colleagues use, as long as it is valid C++, you'll be able to give it a right shape.\n# Resources\n1. First you should read [this guide on installation and configuration](https://xiaoyuliu.github.io/2018/03/30/20180330-clang-format/) for different editors/IDEs.\n2. [Reference](https://clang.llvm.org/docs/ClangFormatStyleOptions.html) on style options\n3. An interactive [configuration file builder](https://clangformat.com/)\n",
      "html": "<h1><a href=\"https://clang.llvm.org/docs/ClangFormat.html\">ClangFormat</a></h1>\n<p>is a tool for automatically stylizing your code, using custom or predefined code-style templates.\n<strong>Almost always ClangFormat</strong>(or other formatting tools) as a rule, because:</p>\n<ol>\n<li>Less work for you as a programmer</li>\n<li>Less human mistakes during stylizing</li>\n<li>It doesn’t matter what code-style your colleagues use, as long as it is valid C++, you’ll be able to give it a right shape.</li>\n</ol>\n<h1>Resources</h1>\n<ol>\n<li>First you should read <a href=\"https://xiaoyuliu.github.io/2018/03/30/20180330-clang-format/\">this guide on installation and configuration</a> for different editors/IDEs.</li>\n<li><a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\">Reference</a> on style options</li>\n<li>An interactive <a href=\"https://clangformat.com/\">configuration file builder</a></li>\n</ol>\n",
      "id": 23
    },
    {
      "path": "tools/static-analysis/clang-tidy.md",
      "url": "tools/static-analysis/clang-tidy.html",
      "content": "# [ClangTidy](https://clang.llvm.org/extra/clang-tidy/)\n\nis a [clang](https://clang.llvm.org/)-based C++ “[linter](https://en.wikipedia.org/wiki/Lint_(software))” tool. Its purpose is to provide an extensible framework for diagnosing and fixing typical programming errors, like style violations, interface misuse, or bugs that can be deduced via [static analysis](https://en.wikipedia.org/wiki/Static_program_analysis). **clang-tidy** is modular and provides a convenient interface for writing new checks.\n\n# Resources\n\n1. [How to](https://github.com/KratosMultiphysics/Kratos/wiki/How-to-use-Clang-Tidy-to-automatically-correct-code) guide\n2. [Video-introduction](https://www.youtube.com/watch?v=OchPaGEH4TE)\n3. [First](https://www.kdab.com/clang-tidy-part-1-modernize-source-code-using-c11c14/) and [second](https://www.kdab.com/clang-tidy-part-2-integrate-qmake-and-other-build-systems-using-bear/) parts of more advanced tutorial\n4. Simple reminder, like [cheat-sheet](https://codeyarns.com/2019/01/28/how-to-use-clang-tidy/)\n5. [Official documentation](https://clang.llvm.org/extra/clang-tidy/)\n",
      "html": "<h1><a href=\"https://clang.llvm.org/extra/clang-tidy/\">ClangTidy</a></h1>\n<p>is a <a href=\"https://clang.llvm.org/\">clang</a>-based C++ “<a href=\"https://en.wikipedia.org/wiki/Lint_(software)\">linter</a>” tool. Its purpose is to provide an extensible framework for diagnosing and fixing typical programming errors, like style violations, interface misuse, or bugs that can be deduced via <a href=\"https://en.wikipedia.org/wiki/Static_program_analysis\">static analysis</a>. <strong>clang-tidy</strong> is modular and provides a convenient interface for writing new checks.</p>\n<h1>Resources</h1>\n<ol>\n<li><a href=\"https://github.com/KratosMultiphysics/Kratos/wiki/How-to-use-Clang-Tidy-to-automatically-correct-code\">How to</a> guide</li>\n<li><a href=\"https://www.youtube.com/watch?v=OchPaGEH4TE\">Video-introduction</a></li>\n<li><a href=\"https://www.kdab.com/clang-tidy-part-1-modernize-source-code-using-c11c14/\">First</a> and <a href=\"https://www.kdab.com/clang-tidy-part-2-integrate-qmake-and-other-build-systems-using-bear/\">second</a> parts of more advanced tutorial</li>\n<li>Simple reminder, like <a href=\"https://codeyarns.com/2019/01/28/how-to-use-clang-tidy/\">cheat-sheet</a></li>\n<li><a href=\"https://clang.llvm.org/extra/clang-tidy/\">Official documentation</a></li>\n</ol>\n",
      "id": 24
    },
    {
      "path": "tools/static-analysis/cppcheck.md",
      "url": "tools/static-analysis/cppcheck.html",
      "content": "# [cppcheck](http://cppcheck.sourceforge.net/)\nis a static analysis tool for C/C++ code. It provides unique code analysis to detect bugs and \nfocuses on detecting undefined behaviour and dangerous coding constructs. The goal is to detect \nonly real errors in the code (i.e. have very few false positives).\n# Resources\n1. Very simple and eays-to-read full-detail [manual](http://cppcheck.sourceforge.net/manual.pdf)\n2. Official github [repo](https://github.com/danmar/cppcheck)\n3. Some [other articles](https://sourceforge.net/projects/cppcheck/files/Articles/)\n# Bonus\n[Here](https://stackoverflow.com/questions/22486573/cppcheck-std-cfg-not-found-error-when-std-cfg-file-is-available) is the fix of `Failed to load library configuration file 'std.cfg'. File not found` error.\n",
      "html": "<h1><a href=\"http://cppcheck.sourceforge.net/\">cppcheck</a></h1>\n<p>is a static analysis tool for C/C++ code. It provides unique code analysis to detect bugs and\nfocuses on detecting undefined behaviour and dangerous coding constructs. The goal is to detect\nonly real errors in the code (i.e. have very few false positives).</p>\n<h1>Resources</h1>\n<ol>\n<li>Very simple and eays-to-read full-detail <a href=\"http://cppcheck.sourceforge.net/manual.pdf\">manual</a></li>\n<li>Official github <a href=\"https://github.com/danmar/cppcheck\">repo</a></li>\n<li>Some <a href=\"https://sourceforge.net/projects/cppcheck/files/Articles/\">other articles</a></li>\n</ol>\n<h1>Bonus</h1>\n<p><a href=\"https://stackoverflow.com/questions/22486573/cppcheck-std-cfg-not-found-error-when-std-cfg-file-is-available\">Here</a> is the fix of <code>Failed to load library configuration file 'std.cfg'. File not found</code> error.</p>\n",
      "id": 25
    },
    {
      "path": "tools/testing/README.md",
      "url": "tools/testing/README.html",
      "content": "# What?\n\nTesting is a process of writing code to ensure that your program behaves as expected.\n\n# Why?\n\nBecause before pushing your program to production, you need to know that there are no bugs and some behavior misconceptions.\n\n# [Also](https://en.wikipedia.org/wiki/Software_testing)\n\n",
      "html": "<h1>What?</h1>\n<p>Testing is a process of writing code to ensure that your program behaves as expected.</p>\n<h1>Why?</h1>\n<p>Because before pushing your program to production, you need to know that there are no bugs and some behavior misconceptions.</p>\n<h1><a href=\"https://en.wikipedia.org/wiki/Software_testing\">Also</a></h1>\n",
      "id": 26
    },
    {
      "path": "tools/testing/gtest.md",
      "url": "tools/testing/gtest.html",
      "content": "# [Google Test](https://en.wikipedia.org/wiki/Google_Test)\n\nis a unit testing library for the C++ programming language. Consists of two formerly separate prjects:\n\n- [GoogleTest](https://github.com/google/googletest/blob/master/googletest/docs/primer.md)\n- [GoogleMock](https://github.com/google/googletest/blob/master/googlemock/README.md)\n\n# Resources\n\n1. [Tutorial](https://github.com/nordlow/gtest-tutorial)\n2. [Intorduction to GoogleMock](http://donsoft.io/gmock-presentation/#/)\n3. [GoogleTest docs](https://github.com/google/googletest/tree/master/googletest/docs)\n\n# Projects\n\n[Here are the list](https://en.wikipedia.org/wiki/Google_Test#Projects_using_Google_Test) of projects using gtest.\n\n# Bonus\n\n1. [How to include it to CMake](https://www.slothparadise.com/google-testing-example-and-cmake-integration/)\n2. [GoogleTest module in CMake](https://cmake.org/cmake/help/v3.10/module/GoogleTest.html)\n3. [How to include `pthread` library in CMake](https://stackoverflow.com/questions/1620918/cmake-and-libpthread)(needed for GoogleTest)\n4. [How to set up googleTest as a shared library on Linux](https://stackoverflow.com/questions/13513905/how-to-set-up-googletest-as-a-shared-library-on-linux)",
      "html": "<h1><a href=\"https://en.wikipedia.org/wiki/Google_Test\">Google Test</a></h1>\n<p>is a unit testing library for the C++ programming language. Consists of two formerly separate prjects:</p>\n<ul>\n<li><a href=\"https://github.com/google/googletest/blob/master/googletest/docs/primer.md\">GoogleTest</a></li>\n<li><a href=\"https://github.com/google/googletest/blob/master/googlemock/README.md\">GoogleMock</a></li>\n</ul>\n<h1>Resources</h1>\n<ol>\n<li><a href=\"https://github.com/nordlow/gtest-tutorial\">Tutorial</a></li>\n<li><a href=\"http://donsoft.io/gmock-presentation/#/\">Intorduction to GoogleMock</a></li>\n<li><a href=\"https://github.com/google/googletest/tree/master/googletest/docs\">GoogleTest docs</a></li>\n</ol>\n<h1>Projects</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/Google_Test#Projects_using_Google_Test\">Here are the list</a> of projects using gtest.</p>\n<h1>Bonus</h1>\n<ol>\n<li><a href=\"https://www.slothparadise.com/google-testing-example-and-cmake-integration/\">How to include it to CMake</a></li>\n<li><a href=\"https://cmake.org/cmake/help/v3.10/module/GoogleTest.html\">GoogleTest module in CMake</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1620918/cmake-and-libpthread\">How to include <code>pthread</code> library in CMake</a>(needed for GoogleTest)</li>\n<li><a href=\"https://stackoverflow.com/questions/13513905/how-to-set-up-googletest-as-a-shared-library-on-linux\">How to set up googleTest as a shared library on Linux</a></li>\n</ol>\n",
      "id": 27
    }
  ]
}